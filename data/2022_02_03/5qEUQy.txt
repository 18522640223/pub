vmess://ew0KICAidiI6ICIyIiwNCiAgInBzIjogImh0dHBzOi8vd3d3Lm1hdHRrYXlkaWFyeS5jb2185Lit5Zu96aaZ5rivL+S4reWbveWPsOa5vihDTilDaGluYS9DaGFuZ3NoYS/lsI/kuJznmoTnqIvluo/mnKrog73nsr7lh4bor4bliKso5Y+v6IO95piv5Lit6L2s6IqC54K5KSIsDQogICJhZGQiOiAiY3UwMS5vbm9uLmNsb3VkIiwNCiAgInBvcnQiOiAiMTMzNDEiLA0KICAiaWQiOiAiNjY4NzlkZWYtMzZlYi0zMzNmLWIwMTItNTJkYzQzNjUxMDYwIiwNCiAgImFpZCI6ICIxIiwNCiAgInNjeSI6ICJhdXRvIiwNCiAgIm5ldCI6ICJ3cyIsDQogICJ0eXBlIjogIm5vbmUiLA0KICAiaG9zdCI6ICJ0d25mLm9ub24uY2xvdWQiLA0KICAicGF0aCI6ICIvZGIiLA0KICAidGxzIjogIiIsDQogICJzbmkiOiAiIg0KfQ==
vmess://ew0KICAidiI6ICIyIiwNCiAgInBzIjogImh0dHBzOi8vd3d3Lm1hdHRrYXlkaWFyeS5jb2185Lit5Zu96aaZ5rivL+S4reWbveWPsOa5vihDTilDaGluYS9HdWFuZ3pob3Uv5bCP5Lic55qE56iL5bqP5pyq6IO957K+5YeG6K+G5YirKOWPr+iDveaYr+S4rei9rOiKgueCuSkiLA0KICAiYWRkIjogImNtMDEub25vbi5jbG91ZCIsDQogICJwb3J0IjogIjIzMzQxIiwNCiAgImlkIjogIjY2ODc5ZGVmLTM2ZWItMzMzZi1iMDEyLTUyZGM0MzY1MTA2MCIsDQogICJhaWQiOiAiMSIsDQogICJzY3kiOiAiYXV0byIsDQogICJuZXQiOiAid3MiLA0KICAidHlwZSI6ICJub25lIiwNCiAgImhvc3QiOiAidHduZi5vbm9uLmNsb3VkIiwNCiAgInBhdGgiOiAiL2RiIiwNCiAgInRscyI6ICIiLA0KICAic25pIjogIiINCn0=
ss://YWVzLTI1Ni1nY206bjh3NFN0bmJWRDlkbVhZbjRBanQ4N0VBQDIuNTguMjQyLjEzMTozMTU3Mg==#https%3a%2f%2fwww.mattkaydiary.com%7c%e4%b8%ad%e5%9b%bd%e5%8f%b0%e6%b9%be(TW)Taiwan%2fTaichung
vmess://ew0KICAidiI6ICIyIiwNCiAgInBzIjogIummmea4ryBZMDEgfCBIS05GIHwg5YWN5rWBIiwNCiAgImFkZCI6ICJoa3kwMS5xdWlja2FpcnBvcnQudG9wIiwNCiAgInBvcnQiOiAiODAiLA0KICAiaWQiOiAiNDdkMGE4NTctNDcxYS00MWRhLWIwMzEtNDkwNjMwMDdkZGI0IiwNCiAgImFpZCI6ICIxIiwNCiAgInNjeSI6ICJhdXRvIiwNCiAgIm5ldCI6ICJ3cyIsDQogICJ0eXBlIjogIm5vbmUiLA0KICAiaG9zdCI6ICIiLA0KICAicGF0aCI6ICIvaW5kZXgiLA0KICAidGxzIjogIiIsDQogICJzbmkiOiAiIg0KfQ==
vmess://ew0KICAidiI6ICIyIiwNCiAgInBzIjogIummmea4ryBZMDIgfCBIS05GIHwg5YWN5rWBIiwNCiAgImFkZCI6ICJoa3kwMi5xdWlja2FpcnBvcnQudG9wIiwNCiAgInBvcnQiOiAiODAiLA0KICAiaWQiOiAiNDdkMGE4NTctNDcxYS00MWRhLWIwMzEtNDkwNjMwMDdkZGI0IiwNCiAgImFpZCI6ICIxIiwNCiAgInNjeSI6ICJhdXRvIiwNCiAgIm5ldCI6ICJ3cyIsDQogICJ0eXBlIjogIm5vbmUiLA0KICAiaG9zdCI6ICIiLA0KICAicGF0aCI6ICIvaW5kZXgiLA0KICAidGxzIjogIiIsDQogICJzbmkiOiAiIg0KfQ==
vmess://eyJ2IjoyLCJwcyI6IklFUEwgwrcg6aaZ5rivSEsgwrcgTzk2IMK3IOS9m+a4r+eUteS/oSIsImFkZCI6ImhremJnZy50M3YuZnVuIiwicG9ydCI6MTc1MTYsImlkIjoiMDIwNThhOTUtMzU1YS0xZGM3LTVkMGYtZjY2MGRhMWRkZDBmIiwiYWlkIjoiIiwiaG9zdCI6ImhremJnZy50M3YuZnVuIiwibmV0Ijoid3MiLCJ0eXBlIjoibm9uZSIsInBhdGgiOiIvZHVoIiwidGxzIjoidGxzIn0=
trojan://uj9t36@120.233.151.82:18017?allowInsecure=1&peer=download.windowsupdate.com#IEPL+%C2%B7+%E9%A6%99%E6%B8%AFHK+%C2%B7+O93+%C2%B7+%E5%B9%BF%E6%B8%AF%E7%A7%BB%E5%8A%A8